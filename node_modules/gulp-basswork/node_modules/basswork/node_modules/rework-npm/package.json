{
  "name": "rework-npm",
  "version": "1.0.0",
  "description": "Import CSS from npm modules using rework",
  "main": "index.js",
  "scripts": {
    "test": "tap test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/reworkcss/rework-npm.git"
  },
  "keywords": [
    "rework",
    "css",
    "style",
    "import",
    "npm",
    "modules"
  ],
  "author": {
    "name": "Conrad Zimmerman",
    "email": "me@conradz.com"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/reworkcss/rework-npm/issues"
  },
  "devDependencies": {
    "convert-source-map": "^0.3.4",
    "node-sass": "^0.9.3",
    "rework": "^1.0.0",
    "source-map": "^0.1.34",
    "tap": "^0.4.11"
  },
  "dependencies": {
    "concat-map": "^0.0.1",
    "css": "^2.0.0",
    "resolve": "^0.7.1",
    "shallow-copy": "^0.0.1"
  },
  "readme": "# rework-npm\n\n[![Build Status](https://travis-ci.org/reworkcss/rework-npm.svg?branch=master)](https://travis-ci.org/reworkcss/rework-npm)\n\nImport CSS styles from NPM modules using\n[rework](https://github.com/reworkcss/rework).\n\nThis lets you use `@import` CSS using the same rules you use for `require` in\nNode. Specify the CSS file for a module using the `style` field in\n`package.json` and use `@import \"my-module\";`, or specify the file name in the\nmodule, like `@import \"my-module/my-file\";`. You can also require files relative\nto the current file using `@import \"./my-file\";`.\n\nAn `@import` will be processed so that the file referenced will have been\nimported in the current scope at the point of the `@import`. If a file has been\npreviously imported in the current scope, that file will not be imported again.\nNew scopes are created in a block such as a `@media` block. Child blocks will\nnot duplicate imports that have been imported in the parent block, but may\nduplicate imports that are imported in a sibling block (since they may not have\neffect otherwise).\n\nYou can use source maps to show which file a definition originated from when\ndebugging in a browser. To include inline source maps, use\n`.toString({ sourcemap: true })` on the rework object when generating the\noutput.\n\nNote that to get correct import paths you must set the `source` option to the\nsource file name when parsing the CSS source (usually with rework). If the\n`source` path is relative, it is resolved to the `root` option (defaults to the\ncurrent directory). The `source` path is used to find the directory to start in\nwhen finding dependencies.\n\n## Example\n\n```js\nvar rework = require('rework'),\n    reworkNPM = require('rework-npm');\n\nvar output = rework('@import \"test\";', { source: 'my-file.css' })\n    .use(reworkNPM())\n    .toString();\n\nconsole.log(output);\n```\n\n## Reference\n\n### `reworkNPM([opts])`\n\nCreates a new plugin for rework that will import files from NPM.\n\n## Options\n\n### root\nThe root directory for the source files. This is used for source maps to make\nimported file names relative to this directory, and for finding the absolute\npath for the top level source file.\n\nExample:\n\n```js\n// Uses `<dir>/src/index.css` as the file path for the top level file. Also all\n// file paths in the source map will be relative to the `<dir>/src` folder.\nrework('@import \"./abc\";', { source: 'index.css' })\n    .use(reworkNPM({ root: path.join(__dirname, 'src') }))\n    .toString();\n```\n\n### shim\nIf you need to import packages that do not specify a `style` property in their\n`package.json` or provide their styles in `index.css`, you can provide a shim\nconfig option to access them. This is specified as a hash whose keys are the\nnames of packages to shim and whose values are the path, relative to that\npackage's `package.json` file, where styles can be found.\n\nExample:\n\n```js\n// Imports the `dist/leaflet.css` file from the `leaflet` package\nrework('@import \"leaflet\";', { source: 'index.css' })\n    .use(reworkNPM({ shim: { 'leaflet': 'dist/leaflet.css' } }))\n    .toString();\n```\n\n### alias\n\nYou can provide aliases for arbitrary import paths, including files and\ndirectories. When importing a file, it will search all directories in the path\nfor aliases also. Note that relative imports are never aliased.\n\nThis is specified as an object where the keys are the name of the import path to\nalias, and the values are the file or directory path for the destination,\nrelative to the `root` option.\n\nExample:\n\n```js\n// Imports the `styles/util.css` file\nrework('@import \"util\";', { source: 'index.css' })\n    .use(reworkNPM({ alias: { 'util': 'styles/util.css' } }))\n    .toString();\n```\n\n```js\n// Imports the `styles/index.css` file if there is a `styles` directory,\n// otherwise the `styles.css` file.\nrework('@import \"util\";', { source: 'index.css' })\n    .use(reworkNPM({ alias: { 'util': 'styles' } }))\n    .toString();\n```\n\n```js\n// Imports the `styles/other.css` file\nrework('@import \"util/other\";', { source: 'index.css' })\n    .use(reworkNPM({ alias: { 'util': 'styles' } }))\n    .toString();\n```\n\n### prefilter\nA function that will be called before an imported file is parsed. This function\nwill be called with the file contents and the full file path. This option can be\nused to convert other languages such as SCSS to CSS before importing.\n\nExample:\n\n```js\n// Process SCSS files\nrework('@import \"./some-file.scss\";', { source: 'index.css' })\n    .use(reworkNPM({ prefilter: compile }))\n    .toString();\n\nfunction compile(src, file) {\n    if (path.extname(file) === '.scss') {\n        return compileScss(src);\n    }\n\n    return src;\n}\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/reworkcss/rework-npm",
  "_id": "rework-npm@1.0.0",
  "_shasum": "3ef620ffa01d5999479e98e1c64b8864878d8df2",
  "_from": "rework-npm@^1.0.0",
  "_resolved": "https://registry.npmjs.org/rework-npm/-/rework-npm-1.0.0.tgz"
}
