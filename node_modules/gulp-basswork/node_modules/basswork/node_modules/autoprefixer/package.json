{
  "name": "autoprefixer",
  "version": "5.1.0",
  "description": "Parse CSS and add vendor prefixes to CSS rules using values from the Can I Use website",
  "keywords": [
    "css",
    "prefix",
    "postprocessor",
    "postcss"
  ],
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/autoprefixer.git"
  },
  "dependencies": {
    "autoprefixer-core": "~5.1.0",
    "fs-extra": "~0.16.3",
    "postcss": "~4.0.2"
  },
  "devDependencies": {
    "gulp-bench-summary": "0.1.0",
    "gulp-json-editor": "2.2.1",
    "jshint-stylish": "1.0.0",
    "gulp-replace": "0.5.2",
    "gulp-jshint": "1.9.0",
    "gulp-bench": "1.1.0",
    "gulp-mocha": "2.0.0",
    "gulp-6to5": "3.0.0",
    "gulp-util": "3.0.2",
    "request": "2.51.0",
    "stylus": "0.49.3",
    "mocha": "2.1.0",
    "gulp": "3.8.10",
    "chai": "1.10.0",
    "nib": "1.1.0",
    "6to5": "3.0.16"
  },
  "bin": {
    "autoprefixer": "autoprefixer"
  },
  "scripts": {
    "test": "gulp"
  },
  "readme": "# Autoprefixer [![Build Status](https://travis-ci.org/postcss/autoprefixer.svg)](https://travis-ci.org/postcss/autoprefixer)\n\n<img align=\"right\" width=\"94\" height=\"71\" src=\"http://postcss.github.io/autoprefixer/logo.svg\" title=\"Autoprefixer logo by Anton Lovchikov\">\n\n[PostCSS] plugin to parse CSS and add vendor prefixes to CSS rules using values\nfrom [Can I Use]. It is [recommended] by Google and used in Twitter,\nand Taobao.\n\nWrite your CSS rules without vendor prefixes (in fact, forget about them\nentirely):\n\n```css\n:fullscreen a {\n    display: flex\n}\n```\n\nAutoprefixer will use the data based on current browser popularity and property\nsupport to apply prefixes for you. You try in the [interactive demo]\nof Autoprefixer.\n\n```css\n:-webkit-full-screen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: flex\n}\n:-moz-full-screen a {\n    display: flex\n}\n:-ms-fullscreen a {\n    display: -ms-flexbox;\n    display: flex\n}\n:fullscreen a {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\nTwitter account for news and releases: [@autoprefixer].\n\n<a href=\"https://evilmartians.com/?utm_source=autoprefixer\">\n<img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\" alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n[interactive demo]: http://simevidas.jsbin.com/gufoko/quiet\n[@autoprefixer]:    https://twitter.com/autoprefixer\n[recommended]:      https://developers.google.com/web/fundamentals/tools/build/setupbuildprocess#dont-trip-up-with-vendor-prefixes\n[Can I Use]:        http://caniuse.com/\n[PostCSS]:          https://github.com/postcss/postcss\n\n## Features\n\n### Write Pure CSS\n\nWorking with Autoprefixer is simple: just forget about vendor prefixes\nand write normal CSS according to the latest W3C specs. You don’t need\na special language (like Sass) or remember where you must use mixins.\n\nAutoprefixer supports selectors (like `:fullscreen` and `::selection`),\nunit function (`calc()`), at‑rules (`@support` and `@keyframes`) and properties.\n\nBecause Autoprefixer is a postprocessor for CSS,\nyou can also use it with preprocessors such as Sass, Stylus or LESS.\n\n### Flexbox, Filters, etc.\n\nJust write normal CSS according to the latest W3C specs and Autoprefixer\nwill produce the code for old browsers.\n\n```css\na {\n    display: flex;\n}\n```\n\ncompiles to:\n\n```css\na {\n    display: -webkit-box;\n    display: -webkit-flex;\n    display: -moz-box;\n    display: -ms-flexbox;\n    display: flex\n}\n```\n\nAutoprefixer has [27 special hacks] to fix web browser differences.\n\n[27 special hacks]: https://github.com/postcss/autoprefixer-core/tree/master/lib/hacks\n\n### Only Actual Prefixes\n\nAutoprefixer utilizes the most recent data from [Can I Use]\nto add only necessary vendor prefixes.\n\nIt also removes old, unnecessary prefixes from your CSS (like `border-radius`\nprefixes, produced by many CSS libraries).\n\n```css\na {\n    -webkit-border-radius: 5px;\n            border-radius: 5px;\n}\n```\n\ncompiles to:\n\n```css\na {\n    border-radius: 5px;\n}\n```\n\n[Can I Use]: http://caniuse.com/\n\n## Browsers\n\nAutoprefixer uses [Browserslist], so you can set can specify the browsers\nyou want to target in your project by queries like `last 2 versions`\nor `> 5%`.\n\nIf you miss browsers option, Browserslist will try to find `browserslist`\nconfig in parent dirs.\n\nSee [Browserslist docs] for queries, browser names, config format\nand default value.\n\n[Browserslist]:      https://github.com/ai/browserslist\n[Browserslist docs]: https://github.com/ai/browserslist#queries\n\n## Source Map\n\nAutoprefixer can modify previous source maps (for example, from Sass):\nit will autodetect a previous map if it is listed in an annotation comment.\n\nAutoprefixer supports inline source maps too. If an input CSS contains\nannotation from the previous step with a map in data:uri, Autoprefixer will\nupdate the source map with prefix changes and inline the new map back into\nthe output CSS.\n\n## Visual Cascade\n\nAutoprefixer changes CSS indentation to create a nice visual cascade\nof prefixes if the CSS is uncompressed:\n\n```css\na {\n    -webkit-box-sizing: border-box;\n       -moz-box-sizing: border-box;\n            box-sizing: border-box;\n}\n```\n\nYou can disable cascade by using the `cascade: false` option.\n\n## Disabling\n\nAutoprefixer was designed to have no interface – it just works. If you need\nsome browser specific hack just write a prefixed property after\nthe unprefixed one.\n\n```css\na {\n    transform: scale(0.5);\n    -moz-transform: scale(0.6);\n}\n```\n\nIf some prefixes were generated in wrong way, please create issue on GitHub.\n\nBut if you do not need Autoprefixer in some part of your CSS,\nyou can use control comments to disable Autoprefixer.\n\n```css\na {\n    transition: 1s; /* it will be prefixed */\n}\n\nb {\n    /* autoprefixer: off */\n    transition: 1s; /* it will not be prefixed */\n}\n```\n\nControl comments disables Autoprefixer within the whole rule in which\nyou place it. In the above example, Autoprefixer will be disabled\nin the entire `b` rule scope, not only after the comment.\n\nYou can also use comments recursively:\n\n```css\n/* autoprefixer: off */\n@support (transition: all) {\n    /* autoprefixer: on */\n    a {\n        /* autoprefixer: off */\n    }\n}\n```\n\nBy default, Autoprefixer also removes outdated prefixes. You can disable this\nbehavior by `remove: false` option. If you have no legacy code, this options\nwill make Autoprefixer about 10% faster.\n\n## FAQ\n\n#### Does it add polyfills for old browsers?\n\nNo. Autoprefixer only adds prefixes. Use [CSS Grace] for polyfills.\nIt is PostCSS plugin too, soo you can parse CSS only once.\n\n[CSS Grace]: https://github.com/cssdream/cssgrace\n\n#### Why don’t gradients work in Firefox?\n\nMake sure that you use correct the [direction syntax].\nFor example, you should use `to bottom` instead of `top`:\n\n```css\na {\n  background: linear-gradient(to bottom, white, black)\n}\n```\n\nUnfortunately, unprefixed gradients use a different direction syntax and most\nexamples you find use an old gradient syntax, so be careful and use always\nthe latest W3C specs with Autoprefixer.\n\n[direction syntax]: https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\n\n#### Why doesn’t Autoprefixer add prefixes to `border-radius`?\n\nDevelopers are often surprised by how few prefixes are required today.\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\nrequired on [Can I Use].\n\nThere is [list with all supported] properties, values and selectors in wiki.\n\n[Can I Use]:               http://caniuse.com/\n[list with all supported]: https://github.com/postcss/autoprefixer/wiki/support-list\n\n#### Why doesn’t Autoprefixer support `display: box`, `box-align`, etc?\n\nThere was 3 specification versions for Flexbox. For example, 2009 draft\nsuggested to write `display: box`, 2012 draft `display: flexbox`,\nbut final versions `display: flex`.\n\nAutoprefixer add prefixes only for properties from [final version]\nof Flexbox spec. So, for example, you need to write `display: flex` instead\nof `display: box`.\n\n[final version]: http://www.w3.org/TR/css-flexbox-1/\n\n#### Why doesn’t Autoprefixer support `appearance`?\n\nUnlike `transition`, the `appearance` property is not a part of\nany specification. So there will not `appearance` in any future.\n\nIn some future when all browsers will work without prefixes you will remove\nAutoprefixer and your CSS must works.\n\n#### Does Autoprefixer add `-epub-` prefix?\n\nNo, Autoprefixer works only with browsers prefixes from Can I Use.\nBut you can use [postcss-epub](https://github.com/Rycochet/postcss-epub)\nfor prefix ePub3 properties.\n\n## Usage\n\n### Grunt\n\nYou can use the [grunt-postcss] plugin for Grunt with `autoprefixer-core`\nand [other PostCSS plugins]. Install the npm package and add it to `Gruntfile`:\n\n```js\nvar autoprefixer = require('autoprefixer-core');\n\ngrunt.initConfig({\n    postcss: {\n        options: {\n            processors: [\n              autoprefixer({ browsers: ['last 2 version'] }).postcss\n            ]\n        },\n        dist: { src: 'css/*.css' }\n    },\n});\n\ngrunt.loadNpmTasks('grunt-postcss');\n```\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#built-with-postcss\n[grunt-postcss]:         https://github.com/nDmitry/grunt-postcss\n\n### Gulp\n\nIn Gulp you can use [gulp-postcss] with `autoprefixer-core` npm package.\n\n```js\ngulp.task('autoprefixer', function () {\n    var postcss      = require('gulp-postcss');\n    var sourcemaps   = require('gulp-sourcemaps');\n    var autoprefixer = require('autoprefixer-core');\n\n    return gulp.src('./src/*.css')\n        .pipe(sourcemaps.init())\n        .pipe(postcss([ autoprefixer({ browsers: ['last 2 version'] }) ]))\n        .pipe(sourcemaps.write('.'))\n        .pipe(gulp.dest('./dest'));\n});\n```\n\nWith `gulp-postcss` you also can combine Autoprefixer\nwith [other PostCSS plugins].\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#built-with-postcss\n[gulp-postcss]:          https://github.com/w0rm/gulp-postcss\n\n### Webpack\n\nIn [webpack] you can use [postcss-loader] with `autoprefixer-core`\nand [other PostCSS plugins].\n\n```js\nvar autoprefixer = require('autoprefixer-core');\n\nmodule.exports = {\n    module: {\n        loaders: [\n            {\n                test:   /\\.css$/,\n                loader: \"style-loader!css-loader!postcss-loader\"\n            }\n        ]\n    },\n    postcss: [ autoprefixer({ browsers: ['last 2 version'] }) ]\n}\n```\n\n[other PostCSS plugins]: https://github.com/postcss/postcss#built-with-postcss\n[postcss-loader]:        https://github.com/postcss/postcss-loader\n[webpack]:               http://webpack.github.io/\n\n### Other Build Tools:\n\n* **Ruby on Rails**: [autoprefixer-rails]\n* **Brunch**: [autoprefixer-brunch]\n* **Broccoli**: [broccoli-autoprefixer]\n* **Middleman**: [middleman-autoprefixer]\n* **Mincer**: add `autoprefixer` npm package and enable it:\n  `environment.enable('autoprefixer')`\n* **Jekyll**: add `autoprefixer-rails` and `jekyll-assets` to `Gemfile`\n\n[middleman-autoprefixer]: https://github.com/porada/middleman-autoprefixer\n[broccoli-autoprefixer]:  https://github.com/sindresorhus/broccoli-autoprefixer\n[autoprefixer-loader]:    https://github.com/passy/autoprefixer-loader\n[autoprefixer-brunch]:    https://github.com/lydell/autoprefixer-brunch\n[autoprefixer-rails]:     https://github.com/ai/autoprefixer-rails\n\n### Compass\n\nYou should think about try Gulp instead of Compass binary, because it has\nbetter Autoprefixer integration and many other awesome plugins.\n\nBut if you can’t move from Compass binray right now, there is a some hack\nto run Autoprefixer after `compass compile`.\n\nInstall `autoprefixer-rails` gem:\n\n```\ngem install autoprefixer-rails\n```\n\nand add post-compile hook to `config.rb`:\n\n```ruby\nrequire 'autoprefixer-rails'\n\non_stylesheet_saved do |file|\n  css = File.read(file)\n  map = file + '.map'\n\n  if File.exists? map\n    result = AutoprefixerRails.process(css,\n      from: file,\n      to:   file,\n      map:  { prev: File.read(map), inline: false })\n    File.open(file, 'w') { |io| io << result.css }\n    File.open(map,  'w') { |io| io << result.map }\n  else\n    File.open(file, 'w') { |io| io << AutoprefixerRails.process(css) }\n  end\nend\n```\n\n### Less\n\nYou can use autoprefixer with less by including the [less-plugin-autoprefix] plugin.\n\n[less-plugin-autoprefix]: https://github.com/less/less-plugin-autoprefix\n\n### Stylus\n\nIf you use Stylus CLI, you can add Autoprefixer by [autoprefixer-stylus] plugin:\n\n```\nstylus -u autoprefixer-stylus -w file.styl\n```\n\n[autoprefixer-stylus]: https://github.com/jenius/autoprefixer-stylus\n\n### CodeKit\n\nCodeKit, since the 2.0 version, contains Autoprefixer. In the After Compiling\nsection, there is a checkbox to enable Autoprefixer. Read [CodeKit docs]\nfor more information.\n\n[CodeKit docs]: https://incident57.com/codekit/help.html#autoprefixer\n\n### Prepros\n\nIf you need free assets build GUI tool, try [Prepros].\nJust set “Auto Prefix CSS” checkbox in right panel.\n\n[Prepros]: http://alphapixels.com/prepros/\n\n### CLI\n\nYou can use the `autoprefixer` binary to process CSS files using\nany assets manager:\n\n```sh\nsudo npm install --global autoprefixer\nautoprefixer *.css\n```\n\nSee `autoprefixer -h` for help.\n\n### JavaScript\n\nYou can use [autoprefixer-core] in your node.js application\nor if you want to develop Autoprefixer plugin for new environment.\n\n```js\nvar autoprefixer = require('autoprefixer-core');\nvar prefixed     = autoprefixer.process('a { transition: transform 1s }').css;\n```\n\nAutoprefixer can be also used as a [PostCSS] processor, so you can combine\nit with [other processors] and parse CSS only once:\n\n```js\npostcss().\n    use( autoprefixer({ browsers: ['> 1%', 'IE 9'] }) ).\n    use( compressor ).\n    process(css);\n```\n\nThere is also [standalone build] for the browser or as a non-Node.js runtime.\n\nYou can use [html-autoprefixer] to process HTML with inlined CSS.\n\n[autoprefixer-core]: https://github.com/postcss/autoprefixer-core\n[html-autoprefixer]: https://github.com/RebelMail/html-autoprefixer\n[other processors]:  https://github.com/postcss/postcss#built-with-postcss\n[standalone build]:  https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js\n[PostCSS]:           https://github.com/postcss/postcss\n\n### PHP\n\nYou can use Autoprefixer in PHP by [autoprefixer-php] library:\n\n```php\n$autoprefixer = new Autoprefixer();\n$prefixed     = $autoprefixer->compile('a { transition: transform 1s }');\n```\n\n[autoprefixer-php]: https://github.com/vladkens/autoprefixer-php\n\n### .NET\n\nFor .NET you can use [Autoprefixer for .NET] library.\n\nFor ASP.NET you can use the official [BundleTransformer.Autoprefixer] plugin\nfor [Bundle Transformer].\n\n1. Install package via NuGet:\n\n  ```\n  PM> Install-Package BundleTransformer.Autoprefixer\n  ```\n2. Perform a post-install actions specified in the `readme.txt` file.\n3. Register a bundles in the `App_Start/BundleConfig.cs` file and configure\n   the Bundle Transformer (see the [documentation]).\n\n[BundleTransformer.Autoprefixer]: http://www.nuget.org/packages/BundleTransformer.Autoprefixer/\n[Autoprefixer for .NET]:          https://github.com/digitalcreations/autoprefixer\n[Bundle Transformer]:             http://bundletransformer.codeplex.com/\n[documentation]:                  http://bundletransformer.codeplex.com/documentation\n\n### Text Editors\n\nAutoprefixer should be used in assets build tools. Text editor plugins are not\na good solution, because prefixes decrease code readability and you will need\nto change value in all prefixed properties.\n\nI recommend you to learn build tools like [Grunt] or [Gulp]. They works much\nbetter and will open you entire new world of useful plugins and automatization.\n\nBut, if you can’t move to build tool, you can use text editor plugins:\n\n* [Sublime Text](https://github.com/sindresorhus/sublime-autoprefixer)\n* [Brackets](https://github.com/mikaeljorhult/brackets-autoprefixer)\n* [Atom Editor](https://github.com/sindresorhus/atom-autoprefixer)\n\n[Grunt]: http://gruntjs.com/\n[Gulp]:  http://gulpjs.com/\n\n#### Visual Studio\n\nYou can apply the Autoprefixer optimizations to your LESS/Sass stylesheets\nin Visual Studio 2013 by using the [Web Essentials 2013] plugin\n(since the 2.2 version).\n\nTo add this functionality in the Visual Studio 2013 (Update 2 or later)\nyou need to do the following steps:\n\n1. Download and install the [Web Essentials 2013 for Update 2].\n2. Choose a `Tools` → `Options` → `Web Essentials` → `CSS` menu item\n3. In the `Enable Autoprefixer` box specify a value equal to `True`\n\n<img src=\"http://i.imgur.com/X9sBBF8.png\" width=\"700\" alt=\"Autoprefixer options in the Web Essentials 2013\" />\n\n[Web Essentials 2013 for Update 2]: http://visualstudiogallery.msdn.microsoft.com/56633663-6799-41d7-9df7-0f2a504ca361\n[Web Essentials 2013]:              http://vswebessentials.com/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/autoprefixer/issues"
  },
  "homepage": "https://github.com/postcss/autoprefixer",
  "_id": "autoprefixer@5.1.0",
  "_shasum": "2db51c2461b294c35b7745e197791735cf54af41",
  "_from": "autoprefixer@^5.0.0",
  "_resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-5.1.0.tgz"
}
